import matplotlib.pyplot as plt
import _pickle as pickle
import numpy as np


"""
The basic idea is to create a grid of metric results, with each row corresponding to
a collection and each column corresponding to a metric readout. Each individual 
row,column combo will be generated by a function that takes in the metric set
and returns a figure. Then the overall figure can just plot these as a subplot
Perhaps one additional row should be added with an explanation (as text) of each plot
    PLOT 0 - Summary Spiderplot    
    PLOT 1 - MOT metrics as bar chart, with bar colored in red-green range, and label written on bar (horizontal)
    PLOT 2 - State Errors as ridgeline plot with axis in feet and other statistics shown
    PLOT 3 - Confusion Matrix
    PLOT 4 - Histogram of any of the metrics for which we record all values (vx, ax, theta, x_travelled, y_travelled)
    PLOT 5 - bar chart of any other unsupervised metrics 
"""

"""
There should also be a supplementary file with, for each metric, a description, and a best and worst value (for coloration)
"""

#plt.style.use("bmh")

MD = {} # metric info dict, load from file



def gen_spiderplot(result,ax,index = (0,0)):
    ax[index].set_title("Overall Performance Summary")

def bar_MOT(result,ax,index = (0,0)):
    """
    Ravel supervised MOT metrics into a bar_chart
    """
    include = ["idp","idr","recall","precision","MOTA","MOTP","gt_no_match", "pred_no_match","true_negative_rate"]
    
    name = []
    val = []
    for met in result["metrics"]:
        if met in include:
            name.append(met)
            val.append(result["metrics"][met])
    
    x_pos = np.arange(len(name))
    ax[index].barh(x_pos,val, align='center', color = np.random.rand(len(x_pos),3))#alpha=0.5)
    ax[index].set_yticks(x_pos, name)
    ax[index].set_title("MOT metrics")
    
def list_MOT(result,ax,index = (0,0)):
    include = ["switches", "fragmentations", "pred_avg_matches","gt_avg_matches"]
    
    
    
    ax[index].set_title("Other MOT Metrics")
    
    
def state_error(result,ax,index = (0,0)):
    pass

def conf_matrix(result,ax,index = (0,0)):
    pass

def unsup_hist(stat,result,ax,index = (0,0)):
    pass

def vel_hist(result,ax,index = (0,0)):
    unsup_hist("avg_vx",result,ax,index)

def unsup_list(result,ax,index = (0,0)):
    pass

def cause_of_death_pie(result,ax,index = (0,0)):
    ax[index].set_title("Cause of Object Death")


if __name__ == "__main__":
    results = [
        "/home/derek/Documents/i24/trajectory-eval-toolkit/eval_results/morose_panda--RAW_GT1.cpkl",
        "/home/derek/Documents/i24/trajectory-eval-toolkit/eval_results/morose_panda--RAW_GT1_reconciled.cpkl"
        ]
    
    for i in range(len(results)):
        with open(results[i],"rb") as f:
            results[i] = pickle.load(f)
    
    plots = [gen_spiderplot,bar_MOT,list_MOT,state_error,vel_hist,unsup_list,cause_of_death_pie,conf_matrix,]
    
    n_r = len(results)
    n_p = len(plots)
    # create figure with n_results x n_plots subplots
    scale = 10
    fig, ax = plt.subplots(n_r,n_p,figsize = (n_p*scale,n_r*scale))
    
    
    
    for i in range(n_r):
        for j in range(n_p):
            plots[j](results[i],ax,(i,j))
    
    
    
    
    
    
    
    fig.show()